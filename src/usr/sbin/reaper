#!/usr/bin/env bash

set -e

function __cleanup ()
{
	__delete_lock
}

function __create_lock ()
{
	if [[ -n ${lock_file} ]]
	then
		touch "${lock_file}"
	fi
}

function __create_state ()
{
	if [[ -n ${state_file} ]]
	then
		printf -- \
			'%s %s\n' \
			"${session_start}" \
			"$(( ${session_start} + ${timeout} ))" \
			> "${state_file}"
	fi
}

function __delete_lock ()
{
	if [[ -f ${lock_file} ]]
	then
		rm -f "${lock_file}"
	fi
}

function __print_message ()
{
	local -r type="${1}"

	local colour_negative='\033[1;31m'
	local colour_positive='\033[1;32m'
	local colour_reset='\033[0m'
	local exit_code="${3:-0}"
	local message="${2}"
	local prefix=""
	local quiet="${quiet:-false}"
	local silent="${silent:-false}"

	if [[ ${monochrome} == true ]]
	then
		unset \
			colour_negative \
			colour_positive \
			colour_reset
	fi

	case "${type}" in
		error)
			prefix="$(
				printf -- \
					'%bERROR:%b ' \
					"${colour_negative}" \
					"${colour_reset}"
			)"
			;;
		info)
			prefix="$(
				printf -- \
					'%bINFO:%b ' \
					"${colour_positive}" \
					"${colour_reset}"
			)"
			;;
		*)
			message="${type}"
			;;
	esac

	if [[ ${quiet} == true ]] \
		|| [[ ${silent} == true ]] \
		&& [[ ${type} != error ]]
	then
		return 0
	elif [[ ${silent} == true ]] \
		&& [[ ${type} == error ]]
	then
		return 1
	elif [[ ${type} == error ]]
	then
		>&2 printf -- \
			'%s%s\n' \
			"${prefix}" \
			"${message}"
	else
		printf -- \
			'%s%s\n' \
			"${prefix}" \
			"${message}"
	fi

	if [[ ${exit_code} -gt 0 ]]
	then
		exit ${exit_code}
	fi
}

function __is_valid_get ()
{
	local -r get_options='^(end|start|ttl)$'
	local -r value="${1}"

	if [[ ${value} =~ ${get_options} ]]
	then
		return 0
	fi

	return 1
}

function __is_valid_positive_integer ()
{
	local -r positive_integer='^[0-9]+$'
	local -r value="${1}"

	if [[ ${value} =~ ${positive_integer} ]]
	then
		return 0
	fi

	return 1
}

function __is_valid_timeout ()
{
	__is_valid_positive_integer "${@}"
}

function __is_valid_wall_timeout ()
{
	__is_valid_positive_integer "${@}"
}

function __reap ()
{
	kill \
		-s "${signal:-TERM}" \
		"${pid:-1}"

	__cleanup
}

function __usage ()
{
	local help="${help:-false}"
	local quiet="${quiet:-false}"
	local silent="${silent:-false}"

	if [[ ${silent} != true ]] \
		|| [[ ${help} == true ]]
	then
		cat <<-USAGE

		Usage: ${0##*/} [OPTIONS]
		       ${0##*/} [{-h|--help}]

		Options:
		  -g, --get KEY              Used to get values from a running ${0##*/}
		                             process. The keys and values they return are:
		                             - start : returns session start timestamp.
		                             - end : returns session end timestamp.
		                             - ttl : returns remaining session time to live.
		  -h, --help                 Show this help and exit.
		  --monochrome               Output colour is suppressed.
		  -p, --pid PID              Send the termination signal to the process with
		                             the pid value PID.
		                             If not specified the default is pid 1.
		  -q, --quiet                Do not print information message output.
		  -qq, --silent              Do not print error message output.
		  -s, --signal SIG           Send the signal SIG to the process.
		                             If not specified the default is SIGTERM.
		  -t, --timeout SECONDS      Time in seconds to wait before sending the
		                             signal to the process. The default is 0 seconds
		                             which indicates no delay.
		  -w, --wall MESSAGE         Set a wall message to send before session end.
		  -T, --wall-timeout SECONDS Set the time before session end to send the
		                             wall message. The default is 30 seconds.
		                             Set to 0 to disable sending a wall message.
		USAGE
	fi

	if [[ ${help} != true ]]
	then
		exit 1
	fi

	exit 0
}

function main ()
{
	local -r lock_file="/var/lock/subsys/reaper"
	local -r state_file="/var/lib/misc/reaper"

	local current_time
	local get
	local help
	local monochrome="false"
	local pid="1"
	local quiet="false"
	local signal="TERM"
	local silent="false"
	local session_start
	local session_end
	local state_value
	local timeout="0"
	local verbose="false"
	local wall_message
	local wall_timeout="30"

	if [[ ${EUID} -ne 0 ]]
	then
		__print_message \
			"error" \
			"${0##*/} must be run as root" \
			1
	fi

	while [[ "${#}" -gt 0 ]]
	do
		case "${1}" in
			--get=*)
				get="${1#*=}"
				shift 1
				;;
			-g|--get)
				get="${2}"
				shift 2 || break
				;;
			-h|--help)
				__usage
				;;
			--monochrome)
				monochrome="true"
				shift 1
				;;
			--pid=*)
				pid="${1#*=}"
				shift 1
				;;
			-p|--pid)
				pid="${2}"
				shift 2 || break
				;;
			--signal=*)
				signal="${1#*=}"
				shift 1
				;;
			-s|--signal)
				signal="${2}"
				shift 2 || break
				;;
			--timeout=*)
				timeout="${1#*=}"
				shift 1
				;;
			-t|--timeout)
				timeout="${2}"
				shift 2 || break
				;;
			-v|--verbose)
				verbose="true"
				shift 1
				;;
			--wall=*)
				wall_message="${1#*=}"
				shift 1
				;;
			-w|--wall)
				wall_message="${2}"
				shift 2 || break
				;;
			--wall-timeout=*)
				wall_timeout="${1#*=}"
				shift 1
				;;
			--wall-timeout)
				wall_timeout="${2}"
				shift 2 || break
				;;
			*)
				__print_message \
					"error" \
					"${0##*/} unknown option ${1}"
				__usage
				;;
		esac
	done

	if [[ -f ${lock_file} ]]
	then
		if [[ -n ${get} ]]
		then
			state_value="$(< "${state_file}")"
			session_end="${state_value##* }"
			session_start="${state_value%% *}"

			case "${get}" in
				end)
					printf -- \
						'%s\n' \
						"${session_end}"
					;;
				start)
					printf -- \
						'%s\n' \
						"${session_start}"
					;;
				ttl)
					current_time="$(
						date -u +%s
					)"

					printf -- \
						'%s\n' \
						"$(( ${session_end} - ${current_time} ))"
					;;
				*)
					__print_message \
						"error" \
						"${0##*/} unknown get value ${get}"
					__usage
					;;
			esac

			exit 0
		else
			__print_message \
				"error" \
				"${0##*/} lock detected - aborting" \
				1
		fi
	elif [[ -n ${get} ]]
	then
		__print_message \
			"error" \
			"${0##*/} is not running"
		__usage
	fi

	trap __cleanup \
		EXIT INT TERM
	__create_lock

	if ! __is_valid_timeout "${timeout}"
	then
		__print_message \
			"error" \
			"${0##*/} invalid --timeout"
		__usage
	fi

	if ! __is_valid_wall_timeout "${wall_timeout}"
	then
		__print_message \
			"error" \
			"${0##*/} invalid --wall-timeout"
		__usage
	fi

	if [[ -z ${wall_message} ]] \
		|| (( timeout <= wall_timeout ))
	then
		wall_timeout="0"
	fi

	session_start="$(
		date -u +%s
	)"

	trap __reap \
		EXIT INT TERM

	__create_state

	if (( timeout > 0 ))
	then
		if coproc read -t "$(( ${timeout} - ${wall_timeout} ))"
		then
			wait "${!}" || :

			if (( wall_timeout > 0 ))
			then
				wall "${wall_message}" || :

				if coproc read -t "${wall_timeout}"
				then
					wait "${!}" || :
				fi
			fi
		fi
	fi

	__print_message \
		"info" \
		"${0##*/} expiring session"

	exit 0
}

main "${@}"
